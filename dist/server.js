var express = require('express');
var path = require('path');
var port = process.env.PORT || 3000;
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var Bear = require('./models/bear'); // I think this needs to be configured in gulp to export the models to dist folder. note sure.
app.use('/app', express.static(path.resolve(__dirname, 'app')));
app.use('/libs', express.static(path.resolve(__dirname, 'libs')));
/*var renderIndex = (req: express.Request, res: express.Response) => {
    res.sendFile(path.resolve(__dirname, 'index.html'));
}

app.get('/*', renderIndex);*/
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
var router = express.Router();
router.get('/app/*', function (req, res) {
    res.sendFile(path.resolve(__dirname, 'index.html'));
});
router.get('/api', function (req, res) {
    res.json({ message: 'hooray! welcome to our api!' });
});
router.route('/api/bears')
    .post(function (req, res) {
    var bear = new Bear();
    bear.name = req.body.name;
    bear.save(function (err) {
        if (err)
            res.send(err);
        res.json({ message: 'Bear created!' });
    });
})
    .get(function (req, res) {
    Bear.find(function (err, bears) {
        if (err)
            res.send(err);
        res.json(bears);
    });
});
router.route('/api/bears/:bear_id')
    .get(function (req, res) {
    Bear.findById(req.params.bear_id, function (err, bear) {
        if (err)
            res.send(err);
        res.json(bear);
    });
});
app.use('/', router);
var dbstring = process.env.MONGOLAB_URI ||
    process.env.MONGOHQ_URL ||
    'mongodb://heroku_cb2hb6wm:5plmn61cgsp0l5roqa2qh83mgk@ds011439.mlab.com:11439/heroku_cb2hb6wm';
var server = app.listen(port, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log('This express app is listening on port:' + port);
});
mongoose.connect(dbstring, function (err, res) {
    if (err) {
        console.log('ERROR connecting to: ' + dbstring + '. ' + err);
    }
    else {
        console.log('Successfully connected to: ' + dbstring);
    }
    ;
});

//# sourceMappingURL=data:application/json;base64,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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbnZhciBwb3J0OiBudW1iZXIgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDA7XHJcbnZhciBhcHAgPSBleHByZXNzKCk7XHJcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcclxudmFyIG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuXHJcbnZhciBCZWFyID0gcmVxdWlyZSgnLi9tb2RlbHMvYmVhcicpOyAgLy8gSSB0aGluayB0aGlzIG5lZWRzIHRvIGJlIGNvbmZpZ3VyZWQgaW4gZ3VscCB0byBleHBvcnQgdGhlIG1vZGVscyB0byBkaXN0IGZvbGRlci4gbm90ZSBzdXJlLlxyXG5cclxuYXBwLnVzZSgnL2FwcCcsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdhcHAnKSkpO1xyXG5hcHAudXNlKCcvbGlicycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdsaWJzJykpKTtcclxuXHJcbi8qdmFyIHJlbmRlckluZGV4ID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnaW5kZXguaHRtbCcpKTtcclxufVxyXG5cclxuYXBwLmdldCgnLyonLCByZW5kZXJJbmRleCk7Ki9cclxuXHJcblxyXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XHJcblxyXG52YXIgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuXHJcbnJvdXRlci5nZXQoJy9hcHAvKicsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XHJcbiAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnaW5kZXguaHRtbCcpKTtcclxufSk7XHJcblxyXG5yb3V0ZXIuZ2V0KCcvYXBpJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcclxuICAgcmVzLmpzb24oeyBtZXNzYWdlOiAnaG9vcmF5ISB3ZWxjb21lIHRvIG91ciBhcGkhJyB9KTtcclxufSk7XHJcblxyXG5yb3V0ZXIucm91dGUoJy9hcGkvYmVhcnMnKVxyXG4gICAgLnBvc3QoZnVuY3Rpb24ocmVxLCByZXMpIHsgICAgICAgIFxyXG4gICAgICAgIHZhciBiZWFyID0gbmV3IEJlYXIoKTtcclxuICAgICAgICBiZWFyLm5hbWUgPSByZXEuYm9keS5uYW1lO1xyXG5cclxuICAgICAgICBiZWFyLnNhdmUoZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICByZXMuc2VuZChlcnIpO1xyXG4gICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6ICdCZWFyIGNyZWF0ZWQhJyB9KTtcclxuICAgICAgICB9KTtcclxuICB9KVxyXG4gICAgLmdldChmdW5jdGlvbihyZXEsIHJlcykge1xyXG4gICAgICAgIEJlYXIuZmluZChmdW5jdGlvbihlcnIsIGJlYXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICByZXMuc2VuZChlcnIpO1xyXG5cclxuICAgICAgICAgICAgcmVzLmpzb24oYmVhcnMpO1xyXG4gICAgICAgIH0pO1xyXG4gIH0pO1xyXG4gIFxyXG4gIHJvdXRlci5yb3V0ZSgnL2FwaS9iZWFycy86YmVhcl9pZCcpICAgIFxyXG4gICAgLmdldChmdW5jdGlvbihyZXEsIHJlcykge1xyXG4gICAgICAgIEJlYXIuZmluZEJ5SWQocmVxLnBhcmFtcy5iZWFyX2lkLCBmdW5jdGlvbihlcnIsIGJlYXIpIHtcclxuICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgIHJlcy5zZW5kKGVycik7XHJcbiAgICAgICAgICAgIHJlcy5qc29uKGJlYXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuYXBwLnVzZSgnLycsIHJvdXRlcik7XHJcblxyXG5cclxudmFyIGRic3RyaW5nID1cclxuICAgIHByb2Nlc3MuZW52Lk1PTkdPTEFCX1VSSSB8fFxyXG4gICAgcHJvY2Vzcy5lbnYuTU9OR09IUV9VUkwgfHxcclxuICAgICdtb25nb2RiOi8vaGVyb2t1X2NiMmhiNndtOjVwbG1uNjFjZ3NwMGw1cm9xYTJxaDgzbWdrQGRzMDExNDM5Lm1sYWIuY29tOjExNDM5L2hlcm9rdV9jYjJoYjZ3bSc7XHJcblxyXG52YXIgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBob3N0ID0gc2VydmVyLmFkZHJlc3MoKS5hZGRyZXNzO1xyXG4gICAgdmFyIHBvcnQgPSBzZXJ2ZXIuYWRkcmVzcygpLnBvcnQ7XHJcbiAgICBjb25zb2xlLmxvZygnVGhpcyBleHByZXNzIGFwcCBpcyBsaXN0ZW5pbmcgb24gcG9ydDonICsgcG9ydCk7XHJcbn0pO1xyXG5cclxubW9uZ29vc2UuY29ubmVjdChkYnN0cmluZywgZnVuY3Rpb24gKGVyciwgcmVzKSB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgY29uc29sZS5sb2cgKCdFUlJPUiBjb25uZWN0aW5nIHRvOiAnICsgZGJzdHJpbmcgKyAnLiAnICsgZXJyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2cgKCdTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvOiAnICsgZGJzdHJpbmcpO1xyXG4gICAgICB9O1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
