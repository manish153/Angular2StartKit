var express = require('express');
var path = require('path');
var port = process.env.PORT || 3000;
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var jwt = require('express-jwt');
var cors = require('cors');
var Bear = require('./models/bear');
var Apartment = require('./models/apartment');
var BusinessUnit = require('./models/businessunit');
app.use('/app', express.static(path.resolve(__dirname, 'app')));
app.use('/libs', express.static(path.resolve(__dirname, 'libs')));
app.use(cors());
var dbstring = process.env.MONGOLAB_URI ||
    process.env.MONGOHQ_URL ||
    'mongodb://heroku_cb2hb6wm:5plmn61cgsp0l5roqa2qh83mgk@ds011439.mlab.com:11439/heroku_cb2hb6wm';
var server = app.listen(port, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log('This express app is listening on port:' + port);
});
var authCheck = jwt({
    secret: new Buffer('460DPY7Pi4xnRUiirPuEfBdxS4wzQGcx8rlA-Qw76fURkmiwtrhv_IXffzsI84HM', 'base64'),
    audience: '1mvHGykVHvxzpwstp2wTmrzLrpzouVTm'
});
mongoose.connect(dbstring, function (err, res) {
    if (err) {
        console.log('ERROR connecting to: ' + dbstring + '. ' + err);
    }
    else {
        console.log('Successfully connected to: ' + dbstring);
    }
    ;
});
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
var router = express.Router();
router.get('/app/*', function (req, res) {
    res.sendFile(path.resolve(__dirname, 'index.html'));
});
router.get('/api', authCheck, function (req, res) {
    res.json({ message: 'hooray! welcome to our api!' });
});
router.route('/api/bears') //while posting pass name=value in parameter body. No space.
    .post(function (req, res) {
    var bear = new Bear();
    bear.name = req.body.name;
    bear.save(function (err) {
        if (err)
            res.send(err);
        res.json({ message: 'Bear created!' });
    });
})
    .get(function (req, res) {
    Bear.find(function (err, bears) {
        if (err)
            res.send(err);
        res.json(bears);
    });
});
router.route('/api/bears/:bear_id')
    .get(function (req, res) {
    Bear.findById(req.params.bear_id, function (err, bear) {
        if (err)
            res.send(err);
        res.json(bear);
    });
})
    .put(function (req, res) {
    Bear.findById(req.params.bear_id, function (err, bear) {
        if (err)
            res.send(err);
        bear.name = req.body.name;
        bear.save(function (err) {
            if (err)
                res.send(err);
            res.json({ message: 'Bear updated!' });
        });
    });
})
    .delete(function (req, res) {
    Bear.remove({
        _id: req.params.bear_id
    }, function (err, bear) {
        if (err)
            res.send(err);
        res.json({ message: 'Successfully deleted' });
    });
});
router.route('/api/apartments')
    .post(function (req, res) {
    var apartment = new Apartment();
    apartment.name = req.body.name;
    apartment.save(function (err) {
        if (err)
            res.send(err);
        res.json({ message: 'Apartment created!' });
    });
})
    .get(function (req, res) {
    Apartment.find(function (err, apartments) {
        if (err)
            res.send(err);
        res.json(apartments);
    });
});
router.route('/api/apartments/:apartment_id')
    .get(function (req, res) {
    Apartment.findById(req.params.apartment_id, function (err, apartment) {
        if (err)
            res.send(err);
        res.json(apartment);
    });
})
    .put(function (req, res) {
    Apartment.findById(req.params.apartment_id, function (err, apartment) {
        if (err)
            res.send(err);
        apartment.name = req.body.name;
        apartment.save(function (err) {
            if (err)
                res.send(err);
            res.json({ message: 'apartment updated!' });
        });
    });
})
    .delete(function (req, res) {
    Apartment.remove({
        _id: req.params.apartment_id
    }, function (err, apartment) {
        if (err)
            res.send(err);
        res.json({ message: 'Successfully deleted' });
    });
});
router.route('/api/businessunits')
    .post(function (req, res) {
    var businessUnit = new BusinessUnit();
    businessUnit.name = req.body.name;
    businessUnit.save(function (err) {
        if (err)
            res.send(err);
        res.json({ message: 'businessUnit created!' });
    });
})
    .get(function (req, res) {
    BusinessUnit.find(function (err, businessunits) {
        if (err)
            res.send(err);
        res.json(businessunits);
    });
});
router.route('/api/businessUnits/:businessUnit_id')
    .get(function (req, res) {
    BusinessUnit.findById(req.params.businessUnit_id, function (err, businessUnit) {
        if (err)
            res.send(err);
        res.json(businessUnit);
    });
})
    .put(function (req, res) {
    BusinessUnit.findById(req.params.businessUnit_id, function (err, businessUnit) {
        if (err)
            res.send(err);
        businessUnit.name = req.body.name;
        businessUnit.save(function (err) {
            if (err)
                res.send(err);
            res.json({ message: 'businessUnit updated!' });
        });
    });
})
    .delete(function (req, res) {
    BusinessUnit.remove({
        _id: req.params.businessUnit_id
    }, function (err, businessUnit) {
        if (err)
            res.send(err);
        res.json({ message: 'Successfully deleted' });
    });
});
app.use('/', router);

//# sourceMappingURL=data:application/json;base64,
